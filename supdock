#!/usr/bin/env ruby
require 'tty-prompt'

$prompt = TTY::Prompt.new

banner = <<-EOS
What's up Dock(er)? Usage: supdock [options] <filenames>
Where [options] are: 
  - stop
  - rm
  - rmi
  - logs
EOS
version = '0.0.1'

def create_selection(ids, names)
  selection = []
  ids.each_with_index do |id,index|
    selection.push("#{id.to_s} - #{names[index].to_s}")
  end
  return selection
end

def get_ids(action)
  if action == 'ps'
    return `docker ps | awk '{print $1}' | tail -n +2`.split
  elsif action == 'psa'
    return `docker ps -a | awk '{print $1}' | tail -n +2`.split
  elsif action == 'images'
    return `docker images | awk '{print $3}' | tail -n +2`.split
  end
end

def get_names(action)
  if action == 'ps'
    return `docker ps | awk '{print $NF}' | tail -n +2`.split
  elsif action == 'psa'
    return `docker ps -a | awk '{print $NF}' | tail -n +2`.split
  elsif action == 'images'
    return `docker images | awk '{print $1}' | tail -n +2`.split
  end
end

case ARGV[0]
  when 'help', '-h', '--help'
    puts banner
  when 'version', '-v', '--version'
    puts version
  when 'stop'
    unless get_ids('ps').empty?
      container = $prompt.select('Which container would you like to stop?', create_selection(get_ids('ps'),get_names('ps')))
      `docker stop #{container.split('-').first}`
      puts "Container #{container} was stopped..."
    else
      puts 'No containers currently running...'
    end
  when 'rm'
    container = $prompt.select('Which container would you like to remove?', create_selection(get_ids('psa'),get_names('psa')))
    `docker rm -f #{container.split('-').first}`
    puts "Container #{container} was removed..."
  when 'rmi'
    image = $prompt.select('Which image would you like to remove?', create_selection(get_ids('images'),get_names('images')))
    `docker rmi -f #{image.split('-').first}`
    puts "Image #{image} was removed..."
  when 'history'
    image = $prompt.select('Which image would you like to see the history of?', create_selection(get_ids('images'),get_names('images')))
    system "docker history #{image.split('-').first}"
  when 'logs'
    image = $prompt.select('Which container would you like to see the logs of?', create_selection(get_ids('psa'),get_names('psa')))
    system "docker logs #{image.split('-').first}"
  else
    system "docker #{ARGV[0]} #{ARGV[1]} #{ARGV[2]}"
  end
