#!/usr/bin/env ruby
require 'tty-prompt'

$prompt = TTY::Prompt.new

banner = <<-EOS
What's up Dock(er)? 

Usage:  supdock COMMAND

Commands:
  stop | all
  rm | all
  rmi
  logs
EOS
version = '0.0.2'

def create_selection(ids, names)
  selection = []
  ids.each_with_index do |id,index|
    selection.push("#{id} - #{names[index]}")
  end
  return selection
end

def get_ids(action)
  return `docker ps | awk '{print $1}' | tail -n +2`.split if action == 'ps'
  return `docker ps -a | awk '{print $1}' | tail -n +2`.split if action == 'psa'
  return `docker images | awk '{print $3}' | tail -n +2`.split if action == 'images'
end

def get_names(action)
  return `docker ps | awk '{print $NF}' | tail -n +2`.split if action == 'ps'
  return `docker ps -a | awk '{print $NF}' | tail -n +2`.split if action == 'psa'
  return `docker images | awk '{print $1}' | tail -n +2`.split if action == 'images'
end

case ARGV[0]
when 'help', '-h', '--help'
  puts banner
  system 'docker --help'
when 'version', '-v', '--version'
  puts version
when 'stop'
  if get_ids('ps').empty?
    puts 'No containers currently running...'
  else
    if ARGV[1] == 'all'
      `docker stop $(docker ps -aq)`
      puts 'All containers stopped...'
    else
      container = $prompt.select('Which container would you like to stop?', create_selection(get_ids('ps') ,get_names('ps')))
      `docker stop #{container.split('-').first}`
      puts "Container #{container} was stopped..."
    end
  end
when 'rm'
  if get_ids('psa').empty?
    puts 'No containers available to remove...'
  else
    if ARGV[1] == 'all'
      `docker rm $(docker ps -aq)`
      puts 'All containers removed...'
    else
      container = $prompt.select('Which container would you like to remove?', create_selection(get_ids('psa') ,get_names('psa')))
      `docker rm -f #{container.split('-').first}`
      puts "Container #{container} was removed..."
    end
  end
when 'rmi'
  if get_ids('images').empty?
    puts 'No images to remove...'
  else
    image = $prompt.select('Which image would you like to remove?', create_selection(get_ids('images') ,get_names('images')))
    `docker rmi -f #{image.split('-').first}`
    puts "Image #{image} was removed..."
  end
when 'history'
  if get_ids('images').empty?
    puts 'No images to see history of...'
  else
    image = $prompt.select('Which image would you like to see the history of?', create_selection(get_ids('images') ,get_names('images')))
    system "docker history #{image.split('-').first}"
  end
when 'logs'
  if get_ids('psa').empty?
    puts 'No containers to see logs of...'
  else
    image = $prompt.select('Which container would you like to see the logs of?', create_selection(get_ids('psa'), get_names('psa')))
    system "docker logs #{image.split('-').first}"
  end
else
  system "docker #{ARGV[0]} #{ARGV[1]} #{ARGV[2]}"
end
